#!/usr/bin/python3

import re
import json
import subprocess
import os, os.path as osp


def do_run(cmd, cwd=None):
    res = subprocess.run(cmd, cwd=cwd, capture_output=True)
    log = {
        "returncode": res.returncode,
        "stdout": res.stdout.decode("utf-8", errors="ignore"),
        "stderr": res.stderr.decode("utf-8", errors="ignore"),
    }
    return log


def parse_frame(frame):
    match = re.search("#([0-9]+) 0x([0-9a-f]+) +\((.*)\+0x([0-9a-f]+)\)", frame)
    frameno, memaddr, fpath, binaddr = match.groups()
    frame = {
        "frameno": int(frameno),
        "memaddr": int(memaddr, 16),
        "fpath": fpath,
        "binaddr": int(binaddr, 16),
    }
    return frame


def parse_output(output):
    output = output.replace("\r\n", "\n")
    match = re.search(r"SUMMARY: (.*)", output)
    summary = match and match.group(1)
    frames = re.findall(r"(#[0-9]+ .*)", output)
    frames = list(map(parse_frame, frames))

    tracebacks = []
    traceback = []
    last_frameno = -1
    for frame in frames:
        frameno = frame["frameno"]
        if frameno < last_frameno:
            tracebacks.append(traceback)
            traceback = []
        traceback.append(frame)
        last_frameno = frameno
    tracebacks.append(traceback)

    log = {
        "summary": summary,
        "tracebacks": tracebacks,
    }

    return log


def main(executable, testcase, output_directory):
    res = do_run([executable, testcase])
    output = res["stdout"] + res["stderr"]
    log = parse_output(output)
    log["stdout"] = res["stdout"]
    log["stderr"] = res["stderr"]
    log["returncode"] = res["returncode"]

    testcase_id = osp.basename(testcase)
    output_path = osp.join(output_directory, f"{testcase_id}.tb")

    if not osp.exists(output_directory):
        os.makedirs(output_directory)

    with open(output_path, "w") as f:
        f.write(json.dumps(log, indent=2))


if __name__ == "__main__":
    import sys

    if len(sys.argv) != 4:
        print(f"Usage: {sys.argv[0]} <executable> <testcase> <output directory>")
        sys.exit(1)

    main(sys.argv[1], sys.argv[2], sys.argv[3])
